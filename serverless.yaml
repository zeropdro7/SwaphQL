service:
 name: nest-serverless-lambda-demo

plugins:
 - 'serverless-plugin-typescript'
 - serverless-plugin-optimize
 - serverless-offline
 - serverless-plugin-warmup

provider:
 name: aws
 runtime: nodejs12.x
 stage: dev
 apiGateway:
   shouldStartNameWithService: true
 environment:
   #mysql
   MYSQL_HOST: ${self:custom.MYSQL.HOST}
   MYSQL_PORT: ${self:custom.MYSQL.PORT}
   #common
   DB_NAME: ${self:custom.DB_NAME}
   USERNAME: ${self:custom.USERNAME} 
   PASSWORD: ${self:custom.PASSWORD}

custom:
 # Habilita el warmup para todas las funciones (Solo para produccion)
 warmup:
   enabled: true
 # Credenciales de la Base de Datos MySQL
  DB_NAME: swaphql
  USERNAME: root
  PASSWORD:
  MYSQL:
    HOST:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]

functions:
 main: # El nombre de la funcion Lambda
   # El modulo 'handler' es exportado en el archivo 'src/lambda'
   handler: src/lambda.handler
   events:
     - http:
         method: any
         path: /{any+}
 graphql:
   handler: handler.server
   events:
     - http:
         path: /
         method: post
         cors: true
 playground:
   handler: handler.playground
   events:
     - http:
         path: /
         method: get
         cors: true

resources:
 Resources:
   service: aws-nestjs-starter
   MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}

# Remueve los paquetes innecesarios para mantener un tamaño de subida pequeño
package:
 exclude:
   - node_modules/typescript/**
   - node_modules/@types/**
